#!/usr/bin/perl -w
# retail: a program to run periodically to print the latest lines of a 
# potentially rotated log file.  Keeps state between runs - state includes
# the last read byte offset of the file, and the next run seeks to that offset.
#
# 2012-07-31 - Rowan Littell

use strict;
use Getopt::Std;
use Fcntl;
use NDBM_File;
use File::Basename;
use Digest::SHA1 qw /sha1_hex sha1_base64/;

my $STATEPATH = "/tmp";
my $DEBUG = 0;

sub usage() {
  print "Usage: retail [-d] [-h] [-s <state dir>] -f <logfile pattern>\n\n";
  print "retail is a log file tailer in the spirit of logtail that keeps state in\n";
  print "an NDBM file and can follow all log files matching a regular expression\n";
  print "pattern.  For example, to follow logs created with a time stamp suffix\n";
  print "of the form access.YYYY-MM-DD (note the escapes for shell):\n\n";
  print "    retail -f /var/log/apache/access.\\\\d{4}-\\\\d{2}-\\\\d{2}\n\n";
  print "retail compares the file name of the log file (but NOT any parts of the path)\n";
  print "to the regular expression when selecting files to follow.\n";
}

# return a list of files to process, sorted by ctime
# ARGS:
#  $filepattern: full path name, of which the last component may be a
#    regular expression to match multiple files
# RETURNS:
#  @files: a list of individual file names (full path), sorted by ctime
sub getfiles ($) {
  my ($filepattern) = @_;
  my $dirname = dirname ($filepattern);
  my $pattern = basename ($filepattern);
  my (@files, %stat);

  opendir (D, $dirname);
  my @dirfiles = readdir (D);
  closedir (D);
  print STDERR "DEBUG: matching pattern: $pattern\n" if ($DEBUG);
  foreach my $file (@dirfiles) {
    if ($file =~ /^$pattern$/) {
      push @files, "$dirname/$file";
      $stat{"$dirname/$file"} = (stat ("$dirname/$file"))[10];
    }
  }

  return (sort { $stat{$a} <=> $stat{$b} } @files);
}

################################################################################

MAIN:
{
  my (%opts, $filepattern, %state, %touched);

  # -d: turn on debugging output
  # -f <filepattern>: process these file patterns
  # -h: print usage
  # -s <state file path>: directory in which to save state files
  getopts('df:hs:', \%opts);

  if ($opts{'h'}) {
    usage();
    exit;
  }

  $DEBUG = 1 if ($opts{'d'});
  $STATEPATH = $opts{'s'} if ($opts{'s'});

  if ($opts{'f'}) {
    $filepattern = $opts{'f'};
  } else {
    die "Need file pattern!\n";
  }

  # to avoid multiple instances of monlog clobbering each other's state
  # files, we use a unique state file generated by the SHA-1 hash of the
  # given file pattern
  my $statefile = "$STATEPATH/retail-" . sha1_hex($filepattern);

  # open the state file
  tie (%state, 'NDBM_File', $statefile, O_RDWR|O_CREAT, 0666) || die "$statefile: $!\n";

  # get list of files to process
  my @files_to_process = getfiles ($filepattern);

  foreach my $file (@files_to_process) {

    # start at the beginning of the file or, if defined, the offset
    # saved in the state file
    my $offset = 0;
    if (defined ($state{"OFFSET:$file"})) {
      $offset = $state{"OFFSET:$file"};
    }

    print STDERR "DEBUG: open $file: $offset\n" if ($DEBUG);

    # open, seek, read/print, and close file
    sysopen (F, $file, O_RDONLY);
    sysseek (F, $offset, 0);
    my $line;
    while (my $bytes = sysread (F, $line, 1024)) {
      if ($DEBUG) {
        if ($line !~ /\n$/) {
          print STDERR '.';
        } else {
          print STDERR '+';
        }
      }
      $offset += $bytes;
      print "$line";
    }
    close (F);

    # save offset for next run
    $state{"OFFSET:$file"} = $offset;

    # we saw this file (used later for cleaning up state file)
    $touched{$file} = 1;

    print STDERR "\nDEBUG: close $file: $offset\n" if ($DEBUG);
  }

  # clean up the state file - remove entries for files that are no longer here
  foreach my $key (keys %state) {
    my (undef, $file) = (split (/:/, $key, 2));
    if (!defined ($touched{$file})) {
      print STDERR "DEBUG: remove $file\n" if ($DEBUG);
      delete ($state{$key});
    }
  }

  # close up shop
  untie (%state);
  exit 0;
}
